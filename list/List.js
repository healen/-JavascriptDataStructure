class List {  constructor() {    this.listSource = []    this.pos = 0    this.listSize = 0    console.log(`初始化对象`)  }  /*  * =============================基础操作，最基本的增，删，改，查======================  * */  /*  * 列表 增1  * */  append(element) {    this.listSource[this.listSize++] = element    console.log(`添加元素 ${element} `)  }  /*  * 列表 增2  * */  insert(element, after) {    console.log(`${element} 后面添加 ${after}`)    let pos = this.find(element)    if (pos > -1) {      this.listSource.splice(pos + 1, 0, after)      this.listSize++      return true    }    return false  }  /*  * 列表 删  * */  remove(element) {    console.log(`移除元素:${element}`)    let removePos = this.find(element)    if (removePos > -1) {      this.listSource.splice(removePos, 1)      this.listSize--      return true    }    return false  }  /*  * 列表 改  * */  update(element, value) {    let pos = this.find(element)    if (pos > -1) {      if (value === "" || !value) {        this.remove(element)      } else {        this.listSource[pos] = value      }      return true    }    return false  }  /*  * 查询  * */  find(element) {    console.log(`执行查询 ${element} 当前所在位置`)    let i = 0    while (i < this.listSize) {      if (this.listSource[i] === element) {        return i      }      i++    }    return -1  }  /*  * 清空列表  * */  clear() {    this.listSource = []    this.listSize = 0    this.pos = 0    console.log('清空列表')  }  /*  * ========================显示操作，字符串形式返回，返回当前位置，以及表格形式打印==================  * */  /*  * 返回所有列表元素  * */  toString() {    console.log("以字符串形式返回当前列表")    return this.listSource.toString()  }  /*  * 以表格形式打印当前列表对象的元素  * */  printTable() {    console.log("以表格形式打印当前列表")    console.table(this.listSource)  }  /*  * 返回当前元素  * */  getElement() {    console.log("获取当前列表")    let {pos} = this    return this.listSource[pos]  }  /*  * ==================================游标操作================================  * */  /*  * 将游标移动至顶端  * */  front() {    console.log("游标移动至顶端")    this.pos = 0  }  /*  * 将游标移动至底部  * */  end() {    console.log("游标移动至底部")    this.pos = this.listSize - 1  }  /*  * 游标上移  * */  prev() {    if (this.pos > 0) {      this.pos--      return true    }    return false  }  /*  * 游标下移  * */  next() {    if (this.pos < this.listSize) {      this.pos++      return true    }    return false  }  /*  * 游标指定位置移动  * */  moveTo(pos) {    if (pos < this.listSize && pos >= 0) {      this.pos = pos      return true    }    return false  }}module.exports = List